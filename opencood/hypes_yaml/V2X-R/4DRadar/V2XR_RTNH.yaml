name: V2XR_RTNH 
root_dir: "/mnt/ssd8T/Cooperative_Perception/V2X-R/train"
validate_dir: "/mnt/ssd8T/Cooperative_Perception/V2X-R/validate"
fov: True

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 4
  epoches: 15
  eval_freq: 1
  save_freq: 1
fov : True
fusion:
  core_method: 'IntermediateFusionDatasetV2XR' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args:
    proj_first: true

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 0.4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -40, -3, 140.8, 40, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 2
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: RTNH_intermediate # RTNH_intermediate_fusion
  args:
    use_modality: processed_radar #[processed_lidar,processed_radar]
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone:
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
      compression: 0

    anchor_num: *achor_num

    ## DATASET
    # Generated from Radar cube
    RDR_SP_CUBE:
      NAME_RDR_SP_CUBE: 'sp_rdr_cube_corridor' # same as folder name
      METHOD: 'quantile'
      GRID_SIZE: 0.4 # [m]
      IS_ANOTHER_DIR: True
      ROI: { # each bin is 0.4 [m] (minimum range resolution)
        'z': [-2, 6.0],   # Dim: [m] / [-2.0, 6.0] for Driving corridor / None (erase)
        'y': [-6.4, 6.4], # Dim: [m] / [-6.4, 6.4] for Driving corridor
        'x': [0, 72.0],   # Dim: [m] / [0.0, 72.0] for Driving corridor
      } # Cartesian (+ 0.4m from setting of RDR_CUBE: Consider this as LPC)

    ##MODEL
    PRE_PROCESSOR:
      NAME: 'RadarSparseProcessor'
      INPUT_DIM: 4 # in [4, 5] / 5 for Doppler

    BACKBONE:
      TYPE: '3D'
      NAME: 'RadarSparseBackbone'
      ENCODING:
        CHANNEL: [64, 128, 256]
        STRIDE:  [2, 2, 2]
        PADDING: [1, 1, 1]
      TO_BEV:
        IS_Z_EMBED: False
        CHANNEL: [256, 256, 256]
        KERNEL_SIZE: [3, 6, 12]
        STRIDE:  [1, 2, 4]
        PADDING: [1, 2, 4]

    HEAD:
      NAME: 'RdrSpcubeHead'
      DIM: 768
      BOX_CODE: ['xc', 'yc', 'zc', 'xl', 'yl', 'zl', 'cos', 'sin']
      
      BG_WEIGHT: 1.
      NMS_OVERLAP_THRESHOLD: 0.1
    
    CLASS_INFO:
      # If containing cls, make the ID as number
      # In this case, we consider ['Sedan', 'Bus or Truck'] as Sedan (Car)
      CLASS_ID: {
        'Sedan': 1,
        'Bus or Truck': -1,
        'Motorcycle': -1,
        'Bicycle': -1,
        'Bicycle Group': -1,
        'Pedestrian': -1,
        'Pedestrian Group': -1,
        'Background': 0,
      }
      IS_CONSIDER_CLASS_NAME_CHANGE: False # V2: change loaded dictionary
      CLASS_NAME_CHANGE: {
        'Sedan': 'Sedan',
        # 'Bus or Truck': 'Sedan',
      }
      NUM_CLS: # automatically consider, just make this blank (not including background)
      SCALE_SMALL_CLS: 1.5

    GENERAL:
      NAME: 'RTNH'
      COMMENT1: 'Driving corridor, LR 0.001~0.0001'
      COMMENT2: 'Adam'
      VERSION: '1.1'
      SEED: 202206
      IS_CUDA_SEED: False
      IS_DETERMINISTIC: True
      DEVICE: 'gpu'
      RESUME:
        IS_RESUME: False
        PATH_EXP: # None
        START_EP: # None
        IS_COPY_LOGS: True

      LOGGING:
        IS_LOGGING: True
        PATH_LOGGING: './logs'
        IS_SAVE_MODEL: True
        INTERVAL_EPOCH_MODEL: 1
        INTERVAL_EPOCH_UTIL: 5

      # order should be matched regarding CLASS_INFO.CLS_ID
    ANCHOR_GENERATOR_CONFIG: [
        {
            'class_name': 'Sedan',
            'anchor_sizes': [[4.2, 2.1, 2.0]],
            'anchor_rotations': [0, 1.5708],
            'anchor_bottom_heights': [0.0],
            'matched_threshold': 0.5,
            'unmatched_threshold': 0.2
        }
      ]

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 0.01

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15]


### ----- Optimizer ----- ###

### ----- Validation ----- ###
VAL:
  IS_VALIDATE: True
  IS_CONSIDER_VAL_SUBSET: True
  VAL_PER_EPOCH_SUBSET: 1
  NUM_SUBSET: 500 # 500
  VAL_PER_EPOCH_FULL: 11 # epoch for validate full dataset

  LIST_VAL_CONF_THR: [0.3]
  LIST_VAL_IOU: [0.7, 0.5, 0.3]
  # This is for logging, change the iou threshold in 'utils/kitti_eval'

  CLASS_VAL_KEYWORD: {
    'Sedan': 'sed',
    'Bus or Truck': 'bus',
    'Motorcycle': 'mot',
    'Bicycle': 'bic',
    'Bicycle Group': 'big',
    'Pedestrian': 'ped',
    'Pedestrian Group': 'peg'
  }

  REGARDING: 'anchor' # in ['anchor']
  LIST_CARE_VAL: ['Sedan']
### ----- Validation ----- ###

### ----- Visualization ----- ###
VIS:
  # OpenCV
  CLASS_BGR: {
    'Sedan': [0,255,0],
    'Bus or Truck': [0,50,255],
    'Motorcycle': [0,0,255],
    'Bicycle': [0,255,255],
    'Pedestrian': [255,0,0],
    'Pedestrian Group': [255,0,100],
    'Label': [128,128,128]
  }

  # Open3D
  CLASS_RGB: {
    'Sedan': [0, 1, 0],
    'Bus or Truck': [1, 0.2, 0],
    'Motorcycle': [1, 0, 0],
    'Bicycle': [1, 1, 0],
    'Pedestrian': [0, 0, 1],
    'Pedestrian Group': [0.4, 0, 1],
    'Label': [0.5, 0.5, 0.5]
  }
  
  ROI:
    TYPE: 'default' # ['default', 'cube']
    DEFAULT: [0,100,-40,40,-10,60] # x_min_max, y_min_max, z_min_max / Dim: [m]

  # For BEV model visualization
  Z_CENTER: {
    'Sedan': 0.5,
    'Bus or Truck': 1.5,
    'Motorcycle': 0.5,
    'Bicycle': 0.5,
    'Pedestrian': 0.5,
    'Pedestrian Group': 0.5,
  }

  # For BEV model visualization
  Z_HEIGHT: {
    'Sedan': 1.9,
    'Bus or Truck': 1.9,
    'Motorcycle': -1,
    'Bicycle': -1,
    'Pedestrian': 2,
    'Pedestrian Group': -1,
  }
### ----- Visualization ----- ###
